"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ArrowLeft, Plus, Search, Filter, Trash2, FileText, Eye, CheckCircle, Clock } from "lucide-react"

interface InvoiceItem {
  id: string
  productCode: string
  productName: string
  quantity: number
  unitPrice: number
  taxRate: number
  total: number
}

interface Invoice {
  id: string
  invoiceNumber: string
  type: "sales" | "purchase"
  customerId: string
  customerName: string
  date: string
  dueDate: string
  status: "draft" | "sent" | "paid" | "overdue" | "cancelled"
  items: InvoiceItem[]
  subtotal: number
  taxAmount: number
  total: number
  notes: string
  paymentMethod: string
}

interface InvoiceManagementProps {
  onBack: () => void
  language: "tr" | "en"
}

const translations = {
  tr: {
    title: "Fatura Yönetimi",
    subtitle: "Satış ve alış faturaları",
    backToHome: "Ana Sayfa",
    newInvoice: "Yeni Fatura",
    createNewInvoice: "Yeni Fatura Oluştur",
    fillInvoiceDetails: "Fatura bilgilerini doldurun ve kalemler ekleyin.",
    generalInfo: "Genel Bilgiler",
    invoiceItems: "Fatura Kalemleri",
    summary: "Özet",
    invoiceType: "Fatura Tipi",
    salesInvoice: "Satış Faturası",
    purchaseInvoice: "Alış Faturası",
    invoiceNumber: "Fatura No",
    autoGenerated: "Otomatik oluşturulacak",
    customerSupplier: "Müşteri/Tedarikçi",
    enterCompanyName: "Firma adını girin",
    invoiceDate: "Fatura Tarihi",
    dueDate: "Vade Tarihi",
    paymentMethod: "Ödeme Yöntemi",
    status: "Durum",
    notes: "Notlar",
    invoiceNotes: "Fatura notları",
    addNewItem: "Yeni Kalem Ekle",
    productCode: "Ürün Kodu",
    productName: "Ürün Adı",
    quantity: "Miktar",
    unitPrice: "Birim Fiyat",
    taxRate: "KDV (%)",
    add: "Ekle",
    product: "Ürün",
    tax: "KDV",
    total: "Toplam",
    action: "İşlem",
    invoiceSummary: "Fatura Özeti",
    subtotal: "Ara Toplam",
    grandTotal: "Genel Toplam",
    cancel: "İptal",
    createInvoice: "Fatura Oluştur",
    totalSales: "Toplam Satış",
    totalPurchases: "Toplam Alış",
    overdue: "Vadesi Geçen",
    totalInvoices: "Toplam Fatura",
    invoices: "fatura",
    followUpRequired: "Takip gerekli",
    thisMonth: "Bu ay",
    searchPlaceholder: "Fatura numarası veya müşteri adı ile ara...",
    allInvoices: "Tüm Faturalar",
    salesInvoices: "Satış Faturaları",
    purchaseInvoices: "Alış Faturaları",
    allStatuses: "Tüm Durumlar",
    draft: "Taslak",
    sent: "Gönderildi",
    paid: "Ödendi",
    cancelled: "İptal",
    invoiceList: "Fatura Listesi",
    showing: "gösteriliyor",
    type: "Tip",
    date: "Tarih",
    due: "Vade",
    amount: "Tutar",
    actions: "İşlemler",
    sales: "Satış",
    purchase: "Alış",
    invoiceDetail: "Fatura Detayı",
    invoiceInfo: "Fatura Bilgileri",
    customerInfo: "Müşteri Bilgileri",
    company: "Firma",
    invoiceTotal: "Fatura Toplamı",
    bankTransfer: "Banka Havalesi",
    creditCard: "Kredi Kartı",
    cash: "Nakit",
    check: "Çek",
    promissoryNote: "Senet",
  },
  en: {
    title: "Invoice Management",
    subtitle: "Sales and purchase invoices",
    backToHome: "Home",
    newInvoice: "New Invoice",
    createNewInvoice: "Create New Invoice",
    fillInvoiceDetails: "Fill in invoice details and add items.",
    generalInfo: "General Information",
    invoiceItems: "Invoice Items",
    summary: "Summary",
    invoiceType: "Invoice Type",
    salesInvoice: "Sales Invoice",
    purchaseInvoice: "Purchase Invoice",
    invoiceNumber: "Invoice Number",
    autoGenerated: "Auto-generated",
    customerSupplier: "Customer/Supplier",
    enterCompanyName: "Enter company name",
    invoiceDate: "Invoice Date",
    dueDate: "Due Date",
    paymentMethod: "Payment Method",
    status: "Status",
    notes: "Notes",
    invoiceNotes: "Invoice notes",
    addNewItem: "Add New Item",
    productCode: "Product Code",
    productName: "Product Name",
    quantity: "Quantity",
    unitPrice: "Unit Price",
    taxRate: "Tax Rate (%)",
    add: "Add",
    product: "Product",
    tax: "Tax",
    total: "Total",
    action: "Action",
    invoiceSummary: "Invoice Summary",
    subtotal: "Subtotal",
    grandTotal: "Grand Total",
    cancel: "Cancel",
    createInvoice: "Create Invoice",
    totalSales: "Total Sales",
    totalPurchases: "Total Purchases",
    overdue: "Overdue",
    totalInvoices: "Total Invoices",
    invoices: "invoices",
    followUpRequired: "Follow-up required",
    thisMonth: "This month",
    searchPlaceholder: "Search by invoice number or customer name...",
    allInvoices: "All Invoices",
    salesInvoices: "Sales Invoices",
    purchaseInvoices: "Purchase Invoices",
    allStatuses: "All Statuses",
    draft: "Draft",
    sent: "Sent",
    paid: "Paid",
    cancelled: "Cancelled",
    invoiceList: "Invoice List",
    showing: "showing",
    type: "Type",
    date: "Date",
    due: "Due",
    amount: "Amount",
    actions: "Actions",
    sales: "Sales",
    purchase: "Purchase",
    invoiceDetail: "Invoice Detail",
    invoiceInfo: "Invoice Information",
    customerInfo: "Customer Information",
    company: "Company",
    invoiceTotal: "Invoice Total",
    bankTransfer: "Bank Transfer",
    creditCard: "Credit Card",
    cash: "Cash",
    check: "Check",
    promissoryNote: "Promissory Note",
  },
}

const t = (key: keyof typeof translations.tr, language: "tr" | "en") => {
  return translations[language][key] || translations.tr[key]
}

const mockInvoices: Invoice[] = [
  {
    id: "1",
    invoiceNumber: "SF-2024-001",
    type: "sales",
    customerId: "C001",
    customerName: "ABC Teknoloji Ltd. Şti.",
    date: "2024-01-15",
    dueDate: "2024-02-14",
    status: "sent",
    items: [
      {
        id: "1",
        productCode: "LP001",
        productName: "Dell XPS 13 Laptop",
        quantity: 2,
        unitPrice: 12000,
        taxRate: 20,
        total: 28800,
      },
    ],
    subtotal: 24000,
    taxAmount: 4800,
    total: 28800,
    notes: "30 gün vadeli ödeme",
    paymentMethod: "Banka Havalesi",
  },
  {
    id: "2",
    invoiceNumber: "AF-2024-001",
    type: "purchase",
    customerId: "S001",
    customerName: "Dell Türkiye A.Ş.",
    date: "2024-01-14",
    dueDate: "2024-02-28",
    status: "paid",
    items: [
      {
        id: "1",
        productCode: "LP001",
        productName: "Dell XPS 13 Laptop",
        quantity: 10,
        unitPrice: 8500,
        taxRate: 20,
        total: 102000,
      },
    ],
    subtotal: 85000,
    taxAmount: 17000,
    total: 102000,
    notes: "Toplu alım indirimi uygulandı",
    paymentMethod: "Kredi Kartı",
  },
  {
    id: "3",
    invoiceNumber: "SF-2024-002",
    type: "sales",
    customerId: "C002",
    customerName: "XYZ Danışmanlık",
    date: "2024-01-13",
    dueDate: "2024-01-28",
    status: "overdue",
    items: [
      {
        id: "1",
        productCode: "MS001",
        productName: "Logitech MX Master 3",
        quantity: 5,
        unitPrice: 650,
        taxRate: 20,
        total: 3900,
      },
    ],
    subtotal: 3250,
    taxAmount: 650,
    total: 3900,
    notes: "Acil teslimat",
    paymentMethod: "Nakit",
  },
]

export function InvoiceManagement({ onBack, language }: InvoiceManagementProps) {
  const [invoices, setInvoices] = useState<Invoice[]>(mockInvoices)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedType, setSelectedType] = useState("all")
  const [selectedStatus, setSelectedStatus] = useState("all")
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null)
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)

  const [newInvoice, setNewInvoice] = useState<Partial<Invoice>>({
    invoiceNumber: "",
    type: "sales",
    customerId: "",
    customerName: "",
    date: new Date().toISOString().split("T")[0],
    dueDate: "",
    status: "draft",
    items: [],
    subtotal: 0,
    taxAmount: 0,
    total: 0,
    notes: "",
    paymentMethod: "Banka Havalesi",
  })

  const [newItem, setNewItem] = useState<Partial<InvoiceItem>>({
    productCode: "",
    productName: "",
    quantity: 1,
    unitPrice: 0,
    taxRate: 20,
    total: 0,
  })

  const invoiceTypes = ["all", "sales", "purchase"]
  const invoiceStatuses = ["all", "draft", "sent", "paid", "overdue", "cancelled"]
  const paymentMethods = [
    t("bankTransfer", language),
    t("creditCard", language),
    t("cash", language),
    t("check", language),
    t("promissoryNote", language),
  ]

  const filteredInvoices = invoices.filter((invoice) => {
    const matchesSearch =
      invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
      invoice.customerName.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesType = selectedType === "all" || invoice.type === selectedType
    const matchesStatus = selectedStatus === "all" || invoice.status === selectedStatus
    return matchesSearch && matchesType && matchesStatus
  })

  const salesInvoices = invoices.filter((i) => i.type === "sales")
  const purchaseInvoices = invoices.filter((i) => i.type === "purchase")
  const totalSales = salesInvoices.reduce((sum, i) => sum + i.total, 0)
  const totalPurchases = purchaseInvoices.reduce((sum, i) => sum + i.total, 0)
  const overdueInvoices = invoices.filter((i) => i.status === "overdue").length

  const getStatusLabel = (status: string) => {
    switch (status) {
      case "draft":
        return t("draft", language)
      case "sent":
        return t("sent", language)
      case "paid":
        return t("paid", language)
      case "overdue":
        return t("overdue", language)
      case "cancelled":
        return t("cancelled", language)
      default:
        return status
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "draft":
        return "bg-gray-500"
      case "sent":
        return "bg-blue-500"
      case "paid":
        return "bg-green-500"
      case "overdue":
        return "bg-red-500"
      case "cancelled":
        return "bg-gray-400"
      default:
        return "bg-gray-500"
    }
  }

  const getTypeLabel = (type: string) => {
    return type === "sales" ? t("sales", language) : t("purchase", language)
  }

  const getTypeColor = (type: string) => {
    return type === "sales" ? "bg-green-500" : "bg-blue-500"
  }

  const addItemToInvoice = () => {
    if (newItem.productName && newItem.quantity && newItem.unitPrice) {
      const total = (newItem.quantity || 0) * (newItem.unitPrice || 0) * (1 + (newItem.taxRate || 0) / 100)
      const item: InvoiceItem = {
        ...(newItem as InvoiceItem),
        id: Date.now().toString(),
        total,
      }

      const updatedItems = [...(newInvoice.items || []), item]
      const subtotal = updatedItems.reduce((sum, item) => sum + item.quantity * item.unitPrice, 0)
      const taxAmount = updatedItems.reduce(
        (sum, item) => sum + (item.quantity * item.unitPrice * item.taxRate) / 100,
        0,
      )

      setNewInvoice({
        ...newInvoice,
        items: updatedItems,
        subtotal,
        taxAmount,
        total: subtotal + taxAmount,
      })

      setNewItem({
        productCode: "",
        productName: "",
        quantity: 1,
        unitPrice: 0,
        taxRate: 20,
        total: 0,
      })
    }
  }

  const removeItemFromInvoice = (itemId: string) => {
    const updatedItems = (newInvoice.items || []).filter((item) => item.id !== itemId)
    const subtotal = updatedItems.reduce((sum, item) => sum + item.quantity * item.unitPrice, 0)
    const taxAmount = updatedItems.reduce((sum, item) => sum + (item.quantity * item.unitPrice * item.taxRate) / 100, 0)

    setNewInvoice({
      ...newInvoice,
      items: updatedItems,
      subtotal,
      taxAmount,
      total: subtotal + taxAmount,
    })
  }

  const handleCreateInvoice = () => {
    if (newInvoice.customerName && newInvoice.items && newInvoice.items.length > 0) {
      const invoice: Invoice = {
        ...(newInvoice as Invoice),
        id: Date.now().toString(),
        invoiceNumber:
          newInvoice.invoiceNumber ||
          `${newInvoice.type === "sales" ? "SF" : "AF"}-2024-${String(invoices.length + 1).padStart(3, "0")}`,
      }
      setInvoices([...invoices, invoice])
      resetForm()
      setIsCreateDialogOpen(false)
    }
  }

  const resetForm = () => {
    setNewInvoice({
      invoiceNumber: "",
      type: "sales",
      customerId: "",
      customerName: "",
      date: new Date().toISOString().split("T")[0],
      dueDate: "",
      status: "draft",
      items: [],
      subtotal: 0,
      taxAmount: 0,
      total: 0,
      notes: "",
      paymentMethod: "Banka Havalesi",
    })
    setNewItem({
      productCode: "",
      productName: "",
      quantity: 1,
      unitPrice: 0,
      taxRate: 20,
      total: 0,
    })
  }

  const handleStatusChange = (invoiceId: string, newStatus: string) => {
    setInvoices(invoices.map((inv) => (inv.id === invoiceId ? { ...inv, status: newStatus as any } : inv)))
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="sm" onClick={onBack}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                {t("backToHome", language)}
              </Button>
              <div>
                <h1 className="text-2xl font-bold text-foreground">{t("title", language)}</h1>
                <p className="text-muted-foreground">{t("subtitle", language)}</p>
              </div>
            </div>
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button onClick={resetForm}>
                  <Plus className="h-4 w-4 mr-2" />
                  {t("newInvoice", language)}
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>{t("createNewInvoice", language)}</DialogTitle>
                  <DialogDescription>{t("fillInvoiceDetails", language)}</DialogDescription>
                </DialogHeader>
                <Tabs defaultValue="general" className="w-full">
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="general">{t("generalInfo", language)}</TabsTrigger>
                    <TabsTrigger value="items">{t("invoiceItems", language)}</TabsTrigger>
                    <TabsTrigger value="summary">{t("summary", language)}</TabsTrigger>
                  </TabsList>
                  <TabsContent value="general" className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="type">{t("invoiceType", language)}</Label>
                        <Select
                          value={newInvoice.type}
                          onValueChange={(value: any) => setNewInvoice({ ...newInvoice, type: value })}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="sales">{t("salesInvoice", language)}</SelectItem>
                            <SelectItem value="purchase">{t("purchaseInvoice", language)}</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="invoiceNumber">{t("invoiceNumber", language)}</Label>
                        <Input
                          id="invoiceNumber"
                          value={newInvoice.invoiceNumber}
                          onChange={(e) => setNewInvoice({ ...newInvoice, invoiceNumber: e.target.value })}
                          placeholder={t("autoGenerated", language)}
                        />
                      </div>
                      <div className="space-y-2 col-span-2">
                        <Label htmlFor="customerName">{t("customerSupplier", language)}</Label>
                        <Input
                          id="customerName"
                          value={newInvoice.customerName}
                          onChange={(e) => setNewInvoice({ ...newInvoice, customerName: e.target.value })}
                          placeholder={t("enterCompanyName", language)}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="date">{t("invoiceDate", language)}</Label>
                        <Input
                          id="date"
                          type="date"
                          value={newInvoice.date}
                          onChange={(e) => setNewInvoice({ ...newInvoice, date: e.target.value })}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="dueDate">{t("dueDate", language)}</Label>
                        <Input
                          id="dueDate"
                          type="date"
                          value={newInvoice.dueDate}
                          onChange={(e) => setNewInvoice({ ...newInvoice, dueDate: e.target.value })}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="paymentMethod">{t("paymentMethod", language)}</Label>
                        <Select
                          value={newInvoice.paymentMethod}
                          onValueChange={(value) => setNewInvoice({ ...newInvoice, paymentMethod: value })}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {paymentMethods.map((method) => (
                              <SelectItem key={method} value={method}>
                                {method}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="status">{t("status", language)}</Label>
                        <Select
                          value={newInvoice.status}
                          onValueChange={(value: any) => setNewInvoice({ ...newInvoice, status: value })}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="draft">{t("draft", language)}</SelectItem>
                            <SelectItem value="sent">{t("sent", language)}</SelectItem>
                            <SelectItem value="paid">{t("paid", language)}</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2 col-span-2">
                        <Label htmlFor="notes">{t("notes", language)}</Label>
                        <Textarea
                          id="notes"
                          value={newInvoice.notes}
                          onChange={(e) => setNewInvoice({ ...newInvoice, notes: e.target.value })}
                          placeholder={t("invoiceNotes", language)}
                        />
                      </div>
                    </div>
                  </TabsContent>
                  <TabsContent value="items" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle>{t("addNewItem", language)}</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-6 gap-4">
                          <div className="space-y-2">
                            <Label>{t("productCode", language)}</Label>
                            <Input
                              value={newItem.productCode}
                              onChange={(e) => setNewItem({ ...newItem, productCode: e.target.value })}
                              placeholder="LP001"
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>{t("productName", language)}</Label>
                            <Input
                              value={newItem.productName}
                              onChange={(e) => setNewItem({ ...newItem, productName: e.target.value })}
                              placeholder={t("productName", language)}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>{t("quantity", language)}</Label>
                            <Input
                              type="number"
                              value={newItem.quantity}
                              onChange={(e) =>
                                setNewItem({ ...newItem, quantity: Number.parseInt(e.target.value) || 0 })
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>{t("unitPrice", language)}</Label>
                            <Input
                              type="number"
                              value={newItem.unitPrice}
                              onChange={(e) =>
                                setNewItem({ ...newItem, unitPrice: Number.parseFloat(e.target.value) || 0 })
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>{t("taxRate", language)}</Label>
                            <Input
                              type="number"
                              value={newItem.taxRate}
                              onChange={(e) =>
                                setNewItem({ ...newItem, taxRate: Number.parseFloat(e.target.value) || 0 })
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>&nbsp;</Label>
                            <Button onClick={addItemToInvoice} className="w-full">
                              {t("add", language)}
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    {newInvoice.items && newInvoice.items.length > 0 && (
                      <Card>
                        <CardHeader>
                          <CardTitle>{t("invoiceItems", language)}</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>{t("product", language)}</TableHead>
                                <TableHead>{t("quantity", language)}</TableHead>
                                <TableHead>{t("unitPrice", language)}</TableHead>
                                <TableHead>{t("tax", language)}</TableHead>
                                <TableHead>{t("total", language)}</TableHead>
                                <TableHead>{t("action", language)}</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {newInvoice.items.map((item) => (
                                <TableRow key={item.id}>
                                  <TableCell>
                                    <div>
                                      <p className="font-medium">{item.productName}</p>
                                      <p className="text-xs text-muted-foreground">{item.productCode}</p>
                                    </div>
                                  </TableCell>
                                  <TableCell>{item.quantity}</TableCell>
                                  <TableCell>₺{item.unitPrice.toLocaleString()}</TableCell>
                                  <TableCell>%{item.taxRate}</TableCell>
                                  <TableCell>₺{item.total.toLocaleString()}</TableCell>
                                  <TableCell>
                                    <Button variant="ghost" size="sm" onClick={() => removeItemFromInvoice(item.id)}>
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </CardContent>
                      </Card>
                    )}
                  </TabsContent>
                  <TabsContent value="summary" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle>{t("invoiceSummary", language)}</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          <div className="flex justify-between">
                            <span>{t("subtotal", language)}:</span>
                            <span>₺{(newInvoice.subtotal || 0).toLocaleString()}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>{t("tax", language)}:</span>
                            <span>₺{(newInvoice.taxAmount || 0).toLocaleString()}</span>
                          </div>
                          <div className="flex justify-between text-lg font-bold border-t pt-2">
                            <span>{t("grandTotal", language)}:</span>
                            <span>₺{(newInvoice.total || 0).toLocaleString()}</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
                <div className="flex justify-end gap-2 mt-6">
                  <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                    {t("cancel", language)}
                  </Button>
                  <Button onClick={handleCreateInvoice}>{t("createInvoice", language)}</Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-6 py-8">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                <FileText className="h-4 w-4" />
                {t("totalSales", language)}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">₺{totalSales.toLocaleString()}</div>
              <p className="text-xs text-muted-foreground">
                {salesInvoices.length} {t("invoices", language)}
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                <FileText className="h-4 w-4" />
                {t("totalPurchases", language)}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">₺{totalPurchases.toLocaleString()}</div>
              <p className="text-xs text-muted-foreground">
                {purchaseInvoices.length} {t("invoices", language)}
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                <Clock className="h-4 w-4" />
                {t("overdue", language)}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">{overdueInvoices}</div>
              <p className="text-xs text-muted-foreground">{t("followUpRequired", language)}</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                <CheckCircle className="h-4 w-4" />
                {t("totalInvoices", language)}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-foreground">{invoices.length}</div>
              <p className="text-xs text-muted-foreground">{t("thisMonth", language)}</p>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-6">
          <CardContent className="pt-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder={t("searchPlaceholder", language)}
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <Select value={selectedType} onValueChange={setSelectedType}>
                <SelectTrigger className="w-full md:w-48">
                  <Filter className="h-4 w-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{t("allInvoices", language)}</SelectItem>
                  <SelectItem value="sales">{t("salesInvoices", language)}</SelectItem>
                  <SelectItem value="purchase">{t("purchaseInvoices", language)}</SelectItem>
                </SelectContent>
              </Select>
              <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                <SelectTrigger className="w-full md:w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{t("allStatuses", language)}</SelectItem>
                  <SelectItem value="draft">{t("draft", language)}</SelectItem>
                  <SelectItem value="sent">{t("sent", language)}</SelectItem>
                  <SelectItem value="paid">{t("paid", language)}</SelectItem>
                  <SelectItem value="overdue">{t("overdue", language)}</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Invoices Table */}
        <Card>
          <CardHeader>
            <CardTitle>{t("invoiceList", language)}</CardTitle>
            <CardDescription>
              {filteredInvoices.length} {t("invoices", language)} {t("showing", language)}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>{t("invoiceNumber", language)}</TableHead>
                  <TableHead>{t("type", language)}</TableHead>
                  <TableHead>{t("customerSupplier", language)}</TableHead>
                  <TableHead>{t("date", language)}</TableHead>
                  <TableHead>{t("due", language)}</TableHead>
                  <TableHead>{t("amount", language)}</TableHead>
                  <TableHead>{t("status", language)}</TableHead>
                  <TableHead>{t("actions", language)}</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredInvoices.map((invoice) => (
                  <TableRow key={invoice.id}>
                    <TableCell className="font-medium">{invoice.invoiceNumber}</TableCell>
                    <TableCell>
                      <Badge className={`${getTypeColor(invoice.type)} text-white`}>{getTypeLabel(invoice.type)}</Badge>
                    </TableCell>
                    <TableCell>{invoice.customerName}</TableCell>
                    <TableCell>{new Date(invoice.date).toLocaleDateString("tr-TR")}</TableCell>
                    <TableCell>{new Date(invoice.dueDate).toLocaleDateString("tr-TR")}</TableCell>
                    <TableCell>₺{invoice.total.toLocaleString()}</TableCell>
                    <TableCell>
                      <Badge className={`${getStatusColor(invoice.status)} text-white`}>
                        {getStatusLabel(invoice.status)}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setSelectedInvoice(invoice)
                            setIsViewDialogOpen(true)
                          }}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Select value={invoice.status} onValueChange={(value) => handleStatusChange(invoice.id, value)}>
                          <SelectTrigger className="w-32">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="draft">{t("draft", language)}</SelectItem>
                            <SelectItem value="sent">{t("sent", language)}</SelectItem>
                            <SelectItem value="paid">{t("paid", language)}</SelectItem>
                            <SelectItem value="overdue">{t("overdue", language)}</SelectItem>
                            <SelectItem value="cancelled">{t("cancelled", language)}</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        {/* Invoice View Dialog */}
        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>
                {t("invoiceDetail", language)} - {selectedInvoice?.invoiceNumber}
              </DialogTitle>
              <DialogDescription>
                {selectedInvoice?.customerName} -{" "}
                {selectedInvoice && new Date(selectedInvoice.date).toLocaleDateString("tr-TR")}
              </DialogDescription>
            </DialogHeader>
            {selectedInvoice && (
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">{t("invoiceInfo", language)}</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-2">
                      <div className="flex justify-between">
                        <span>{t("invoiceNumber", language)}:</span>
                        <span className="font-medium">{selectedInvoice.invoiceNumber}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>{t("type", language)}:</span>
                        <Badge className={`${getTypeColor(selectedInvoice.type)} text-white`}>
                          {getTypeLabel(selectedInvoice.type)}
                        </Badge>
                      </div>
                      <div className="flex justify-between">
                        <span>{t("status", language)}:</span>
                        <Badge className={`${getStatusColor(selectedInvoice.status)} text-white`}>
                          {getStatusLabel(selectedInvoice.status)}
                        </Badge>
                      </div>
                      <div className="flex justify-between">
                        <span>{t("paymentMethod", language)}:</span>
                        <span className="font-medium">{selectedInvoice.paymentMethod}</span>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">{t("customerInfo", language)}</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-2">
                      <div className="flex justify-between">
                        <span>{t("company", language)}:</span>
                        <span className="font-medium">{selectedInvoice.customerName}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>{t("invoiceDate", language)}:</span>
                        <span>{new Date(selectedInvoice.date).toLocaleDateString("tr-TR")}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>{t("dueDate", language)}:</span>
                        <span>{new Date(selectedInvoice.dueDate).toLocaleDateString("tr-TR")}</span>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle>{t("invoiceItems", language)}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>{t("product", language)}</TableHead>
                          <TableHead>{t("quantity", language)}</TableHead>
                          <TableHead>{t("unitPrice", language)}</TableHead>
                          <TableHead>{t("tax", language)}</TableHead>
                          <TableHead>{t("total", language)}</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {selectedInvoice.items.map((item) => (
                          <TableRow key={item.id}>
                            <TableCell>
                              <div>
                                <p className="font-medium">{item.productName}</p>
                                <p className="text-xs text-muted-foreground">{item.productCode}</p>
                              </div>
                            </TableCell>
                            <TableCell>{item.quantity}</TableCell>
                            <TableCell>₺{item.unitPrice.toLocaleString()}</TableCell>
                            <TableCell>%{item.taxRate}</TableCell>
                            <TableCell>₺{item.total.toLocaleString()}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>{t("invoiceTotal", language)}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span>{t("subtotal", language)}:</span>
                        <span>₺{selectedInvoice.subtotal.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>{t("tax", language)}:</span>
                        <span>₺{selectedInvoice.taxAmount.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between text-lg font-bold border-t pt-2">
                        <span>{t("grandTotal", language)}:</span>
                        <span>₺{selectedInvoice.total.toLocaleString()}</span>
                      </div>
                    </div>
                    {selectedInvoice.notes && (
                      <div className="mt-4 p-3 bg-muted rounded-lg">
                        <p className="text-sm">
                          <strong>{t("notes", language)}:</strong> {selectedInvoice.notes}
                        </p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            )}
          </DialogContent>
        </Dialog>
      </main>
    </div>
  )
}
